{"version":3,"sources":["redux/shop/shop.selectors.js","components/with-spinner/with-spinner.component.jsx","components/collection-item/collection-item.styles.jsx","components/collection-item/collection-item.component.jsx","components/preview-collection/preview-collection.styles.jsx","components/preview-collection/preview-collection.component.jsx","components/collections-overview/collections-overview.styles.jsx","components/collections-overview/collections-overview.component.jsx","components/collections-overview/collections-overview.container.jsx"],"names":["selectShop","state","shop","selectCollections","createSelector","collections","selectCollectionsForPreview","Object","keys","map","key","selectCollection","collectionUrlParam","selectIsCollectionFetching","isFetching","selectIsCollectionsLoaded","WithSpinner","WrappedComponent","isLoading","otherProps","CollectionItemContainer","styled","div","AddButton","CustomButton","BackgroundImage","imageUrl","CollectionFooterContainer","NameContainer","span","PriceContainer","connect","dispatch","addItem","item","data","name","price","console","log","id","className","onClick","inverted","CollectionPreviewContainer","TitleContainer","h1","PreviewContainer","withRouter","title","items","history","match","routeName","push","path","toUpperCase","filter","idx","CollectionsOverviewContainer","mapStateToProps","createStructuredSelector","otherCollectionProps","compose","CollectionOverview"],"mappings":"sHAAA,oJAGMA,EAAa,SAAAC,GAAK,OAAIA,EAAMC,MAErBC,EAAoBC,YAC7B,CAACJ,IACD,SAAAE,GAAI,OAAIA,EAAKG,eAGJC,EAA8BF,YACvC,CAACD,IACD,SAAAE,GAAW,OACXA,EAAcE,OAAOC,KAAKH,GAAaI,KAAI,SAAAC,GAAG,OAAGL,EAAYK,MAAQ,MAI5DC,EAAmB,SAAAC,GAAkB,OAC9CR,YACI,CAACD,IACI,SAAAE,GAAW,OAAKA,EAAcA,EAAYO,GAAsB,SAGhEC,EAA6BT,YACtC,CAACJ,IACD,SAAAE,GAAI,OAAIA,EAAKY,cAGJC,EAA4BX,YACrC,CAACJ,IACD,SAAAE,GAAI,QAAMA,EAAKG,gB,qECrBJW,IALK,SAAAC,GAAgB,OAAK,YAAiC,IAA/BC,EAA8B,EAA9BA,UAAcC,EAAgB,6BACrE,OAAOD,EAAc,kBAAC,IAAD,MAAkB,kBAACD,EAAqBE,M,ohDCF1D,IAAMC,EAA0BC,IAAOC,IAAV,KA6BvBC,EAAYF,YAAOG,IAAPH,CAAH,KAcTI,EAAkBJ,IAAOC,IAAV,KAQN,gBAAGI,EAAH,EAAGA,SAAH,oBAAyBA,EAAzB,QAGTC,EAA4BN,IAAOC,IAAV,KAQzBM,EAAgBP,IAAOQ,KAAV,KAKbC,EAAiBT,IAAOQ,KAAV,KCKZE,gBACb,MALyB,SAAAC,GAAQ,MAAK,CACtCC,QAAS,SAAAC,GAAI,OAAIF,EAASC,YAAQC,QAGrBH,EAvDS,SAAC,GAA6B,IAA3BG,EAA0B,EAA1BA,KAAMD,EAAoB,EAApBA,QAASE,EAAW,EAAXA,KAChCC,EAA0BF,EAA1BE,KAAMC,EAAoBH,EAApBG,MAAOX,EAAaQ,EAAbR,SACjBS,GAAMG,QAAQC,IAAIJ,EAAKK,IA+B3B,OACE,kBAACpB,EAAD,KACE,kBAACK,EAAD,CAAiBgB,UAAU,QAAQf,SAAUA,IAC7C,kBAACC,EAAD,KACE,kBAACC,EAAD,KAAgBQ,GAChB,kBAACN,EAAD,KAAiBO,IAEnB,kBAACd,EAAD,CAAWmB,QAAS,kBAAMT,EAAQC,IAAOS,UAAQ,GAAjD,oB,swBC1DC,IAAMC,EAA6BvB,IAAOC,IAAV,KAS1BuB,EAAiBxB,IAAOyB,GAAV,KASdC,EAAmB1B,IAAOC,IAAV,KCMd0B,eAfW,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAOC,EAAjB,EAAiBA,QAASC,EAA1B,EAA0BA,MAAOC,EAAjC,EAAiCA,UAAjC,OACxB,kBAACT,EAAD,KACE,kBAACC,EAAD,CAAgBH,QAAS,kBAAMS,EAAQG,KAAR,UAAgBF,EAAMG,KAAtB,YAA8BF,MAC1DJ,EAAMO,eAET,kBAACT,EAAD,KACGG,EACEO,QAAO,SAACvB,EAAMwB,GAAP,OAAeA,EAAM,KAC5BjD,KAAI,SAAAyB,GAAI,OACP,kBAAC,IAAD,CAAgBxB,IAAKwB,EAAKM,GAAIN,KAAMA,Y,oHClBvC,IAAMyB,EAA+BtC,IAAOC,IAAV,KCenCsC,EAAkBC,YAAyB,CAC/CxD,YAAaC,MAGAyB,cAAQ6B,EAAR7B,EAZa,SAAC,GAAD,IAAG1B,EAAH,EAAGA,YAAH,OAC1B,kBAACsD,EAAD,KACGtD,EAAYI,KAAI,gBAAG+B,EAAH,EAAGA,GAAOsB,EAAV,6BACf,kBAAC,EAAD,eAAmBpD,IAAK8B,GAAQsB,WCJhCF,EAAkBC,YAAyB,CAC7C3C,UAAWL,MAIT8C,EAA+BI,YACjChC,YAAQ6B,GACR5C,IAFiC+C,CAGnCC,GAKaL","file":"static/js/7.bfe0bd55.chunk.js","sourcesContent":["import {createSelector} from 'reselect'\r\n\r\n\r\nconst selectShop = state => state.shop\r\n\r\nexport const selectCollections = createSelector(\r\n    [selectShop],\r\n    shop => shop.collections\r\n)\r\n\r\nexport const selectCollectionsForPreview = createSelector(\r\n    [selectCollections],\r\n    collections =>\r\n    collections ? Object.keys(collections).map(key=> collections[key]) : []\r\n)\r\n\r\n//here function returns a function\r\nexport const selectCollection = collectionUrlParam => \r\n    createSelector(\r\n        [selectCollections],\r\n             collections => (collections ? collections[collectionUrlParam] : null)\r\n    )\r\n\r\nexport const selectIsCollectionFetching = createSelector(\r\n    [selectShop],\r\n    shop => shop.isFetching\r\n)\r\n\r\nexport const selectIsCollectionsLoaded = createSelector(\r\n    [selectShop],\r\n    shop => !!shop.collections\r\n    //this will return the actual true or false value double !!\r\n)","import React from 'react'\r\n\r\nimport Spinner from '../spinner/spinner.component'\r\n\r\nconst WithSpinner = WrappedComponent =>  ({isLoading, ...otherProps}) => {\r\n    return isLoading ? ( <Spinner /> ) : ( <WrappedComponent {...otherProps} /> )\r\n}\r\n\r\n\r\nexport default WithSpinner","import styled from 'styled-components';\r\nimport CustomButton from '../custom-button/custom-button.component';\r\n\r\nexport const CollectionItemContainer = styled.div`\r\n  width: 22vw;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 350px;\r\n  align-items: center;\r\n  position: relative;\r\n  &:hover {\r\n    .image {\r\n      opacity: 0.8;\r\n    }\r\n    button {\r\n      opacity: 0.85;\r\n      display: flex;\r\n    }\r\n  }\r\n  @media screen and (max-width: 800px) {\r\n    width: 40vw;\r\n    &:hover {\r\n      .image {\r\n        opacity: unset;\r\n      }\r\n      button {\r\n        opacity: unset;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const AddButton = styled(CustomButton)`\r\n  width: 80%;\r\n  opacity: 0.7;\r\n  position: absolute;\r\n  top: 255px;\r\n  display: none;\r\n  @media screen and (max-width: 800px) {\r\n    display: block;\r\n    opacity: 0.9;\r\n    min-width: unset;\r\n    padding: 0 10px;\r\n  }\r\n`;\r\n\r\nexport const BackgroundImage = styled.div`\r\n  width: 100%;\r\n  height: 95%;\r\n  border-style: solid;\r\n  border-width: 1px;\r\n  background-size: cover;\r\n  background-position: center;\r\n  margin-bottom: 5px;\r\n  background-image: ${({ imageUrl }) => `url(${imageUrl})`};\r\n`;\r\n\r\nexport const CollectionFooterContainer = styled.div`\r\n  width: 100%;\r\n  height: 5%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  font-size: 18px;\r\n`;\r\n\r\nexport const NameContainer = styled.span`\r\n  width: 90%;\r\n  margin-bottom: 15px;\r\n`;\r\n\r\nexport const PriceContainer = styled.span`\r\n  width: 10%;\r\n  text-align: right;\r\n`;","// const dJSON = require('dirty-json');\r\n\r\nimport {dJSON} from 'dirty-json'\r\n\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { addItem } from '../../redux/cart/cart.actions';\r\nimport {showDataFromId} from '../../firebase/firebase.utils'\r\n\r\n\r\nimport {\r\n  CollectionItemContainer,\r\n  CollectionFooterContainer,\r\n  AddButton,\r\n  BackgroundImage,\r\n  NameContainer,\r\n  PriceContainer\r\n} from './collection-item.styles';\r\n\r\nconst CollectionItem =  ({ item, addItem, data }) => {\r\n  const { name, price, imageUrl } = item;\r\n   if(data) console.log(data.id)\r\n\r\n  //  const Result = data || {}\r\n  //  console.log(` L O O K   H E R E -> ${(Result.id)}`)\r\n let idUser = 'pops'\r\n  // const StringJSON =  JSON.stringify(data)\r\n\r\n  // if(data) {\r\n  //   if(data.id) {\r\n  //   //  showDataFromId(data)\r\n  //   // console.log(data.id)\r\n  //   // idUser = data.id\r\n\r\n  //   return (\r\n  //     <CollectionItemContainer>\r\n  //       <BackgroundImage className='image' imageUrl={imageUrl} />\r\n  //       <CollectionFooterContainer>\r\n  //         <NameContainer>{name}</NameContainer>\r\n  //         <PriceContainer>{price}</PriceContainer>\r\n  //       </CollectionFooterContainer>\r\n  //       <AddButton onClick={() => addItem(item, data)} inverted>\r\n  //         Add to cart\r\n  //       </AddButton>\r\n  //     </CollectionItemContainer>\r\n  //   );\r\n\r\n  //   }\r\n  // }\r\n\r\n\r\n\r\n  return (\r\n    <CollectionItemContainer>\r\n      <BackgroundImage className='image' imageUrl={imageUrl} />\r\n      <CollectionFooterContainer>\r\n        <NameContainer>{name}</NameContainer>\r\n        <PriceContainer>{price}</PriceContainer>\r\n      </CollectionFooterContainer>\r\n      <AddButton onClick={() => addItem(item)} inverted>\r\n        Add to cart\r\n      </AddButton>\r\n    </CollectionItemContainer>\r\n  );\r\n};\r\n\r\n// const mapStateToProps = state => ({\r\n//   data: state.user.currentUser\r\n// })\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addItem: item => dispatch(addItem(item))\r\n});\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(CollectionItem);","import styled from 'styled-components';\r\n\r\nexport const CollectionPreviewContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 30px;\r\n  @media screen and (max-width: 800px) {\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nexport const TitleContainer = styled.h1`\r\n  font-size: 28px;\r\n  margin-bottom: 25px;\r\n  cursor: pointer;\r\n  &:hover {\r\n    color: grey;\r\n  }\r\n`;\r\n\r\nexport const PreviewContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  @media screen and (max-width: 800px) {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    grid-gap: 15px;\r\n  }\r\n`;","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport CollectionItem from '../collection-item/collection-item.component';\r\n\r\nimport {\r\n  CollectionPreviewContainer,\r\n  TitleContainer,\r\n  PreviewContainer\r\n} from './preview-collection.styles';\r\n\r\nconst CollectionPreview = ({ title, items, history, match, routeName }) => (\r\n  <CollectionPreviewContainer>\r\n    <TitleContainer onClick={() => history.push(`${match.path}/${routeName}`)}>\r\n      {title.toUpperCase()}\r\n    </TitleContainer>\r\n    <PreviewContainer>\r\n      {items\r\n        .filter((item, idx) => idx < 4)\r\n        .map(item => (\r\n          <CollectionItem key={item.id} item={item} />\r\n        ))}\r\n    </PreviewContainer>\r\n  </CollectionPreviewContainer>\r\n);\r\n\r\nexport default withRouter(CollectionPreview);","import styled from 'styled-components';\r\n\r\nexport const CollectionsOverviewContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport CollectionPreview from '../preview-collection/preview-collection.component';\r\n\r\nimport { selectCollectionsForPreview } from '../../redux/shop/shop.selectors';\r\nimport { CollectionsOverviewContainer } from './collections-overview.styles';\r\n\r\nconst CollectionsOverview = ({ collections }) => (\r\n  <CollectionsOverviewContainer>\r\n    {collections.map(({ id, ...otherCollectionProps }) => (\r\n      <CollectionPreview key={id} {...otherCollectionProps} />\r\n    ))}\r\n  </CollectionsOverviewContainer>\r\n);\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  collections: selectCollectionsForPreview\r\n});\r\n\r\nexport default connect(mapStateToProps)(CollectionsOverview);","import {connect} from 'react-redux'\r\nimport {compose} from 'redux'\r\nimport {createStructuredSelector} from 'reselect'\r\n\r\nimport {selectIsCollectionFetching} from '../../redux/shop/shop.selectors'\r\nimport WithSpinner from '../with-spinner/with-spinner.component'\r\nimport CollectionOverview from './collections-overview.component'\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    isLoading: selectIsCollectionFetching\r\n})\r\n\r\n//const CollectionsOverviewContainer = connect(mapStateToProps)(WithSpinner(CollectionOverview))\r\nconst CollectionsOverviewContainer = compose(\r\n    connect(mapStateToProps),\r\n    WithSpinner\r\n)(CollectionOverview)\r\n//it will first evaluate the WithSpinner by passing Collection overview\r\n//compose will do evaluation from right to left\r\n//compose allow us to evaluate multiple currying functions\r\n\r\nexport default CollectionsOverviewContainer"],"sourceRoot":""}